---
name: Terraform Module Validation
on:
  workflow_call:
    secrets:
      appvia-actions-secret:
        description: "Appvia App secret for GH"
        required: false
      appvia-actions-id:
        description: "Appvia App ID for GH"
        required: false

    inputs:
      cicd-repository:
        default: "mjraadi/terraform-cicd-workflows"
        description: "The repository to pull the CI/CD workflows from"
        required: false
        type: string

      cicd-branch:
        default: "main"
        description: "The branch to pull the CI/CD workflows from"
        required: false
        type: string

      enable-checkov:
        default: true
        description: "Whether to run checkov security scanning"
        required: false
        type: boolean

      enable-private-access:
        description: Optional flag to state if terraform requires pulling private modules
        required: false
        default: false
        type: boolean

      enable-terraform-tests:
        default: true
        description: "Whether to run terraform test"
        required: false
        type: boolean

      organization-name:
        default: "appvia"
        description: "The name of the GitHub organization"
        required: false
        type: string

      terraform-dir:
        default: "."
        description: "The directory to validate"
        required: false
        type: string

      terraform-init-extra-args:
        default: ""
        description: "Extra arguments to pass to terraform init"
        required: false
        type: string

      terraform-tests-dir:
        default: "."
        description: "The terraform test directory"
        required: false
        type: string

      terraform-version:
        default: "1.11.2"
        description: "The version of terraform to use"
        required: false
        type: string

      trivy-version:
        default: "v0.56.2"
        description: "The version of trivy to use"
        required: false
        type: string

      working-directory:
        default: "."
        description: "Working directory"
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-format:
    name: "Terraform Format"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.format.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Format
        id: format
        run: terraform -chdir=${{ inputs.terraform-dir }} fmt -check -recursive

  terraform-lint:
    name: "Terraform Lint"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.lint.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Terraform Bootstrap
        id: bootstrap
        uses: mjraadi/terraform-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
      - name: Setup Linter
        uses: terraform-linters/setup-tflint@v5
      - name: Linter Initialize
        run: tflint --init
      - name: Linting Code
        id: lint
        run: tflint -f compact

  terraform-tests:
    name: "Terraform Unit Tests"
    runs-on: ubuntu-latest
    if: inputs.enable-terraform-tests
    defaults:
      run:
        working-directory: .
    outputs:
      result: ${{ steps.tests.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Terraform Bootstrap
        id: bootstrap
        uses: mjraadi/terraform-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: .
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: .
      - name: Run Tests
        id: tests
        run: terraform -chdir=${{ inputs.terraform-tests-dir }} test

  terraform-init:
    name: "Terraform Init"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.bootstrap.outputs.outcome-init }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Terraform Bootstrap
        id: bootstrap
        uses: mjraadi/terraform-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}

  terraform-validate:
    name: "Terraform Validate"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.validate.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Terraform Bootstrap
        id: bootstrap
        uses: mjraadi/terraform-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=${{ inputs.terraform-dir }} validate -no-color

  terraform-security:
    name: "Static Security Analysis"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.security.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Check If Trivy Ignore File Exists
        id: security-exceptions
        run: |
          if [ -e ".trivyignore" ]; then
            echo filename=".trivyignore" >> "${GITHUB_OUTPUT}"
          fi
      - name: Terraform Bootstrap
        id: bootstrap
        uses: mjraadi/terraform-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
      - name: Run Trivy vulnerability
        id: security
        uses: aquasecurity/trivy-action@0.33.1
        with:
          exit-code: "1"
          format: "table"
          ignore-unfixed: true
          scan-type: "config"
          scan-ref: ${{ inputs.working-directory }}
          severity: "CRITICAL,HIGH"
          trivyignores: ${{ steps.security-exceptions.outputs.filename }}
          version: ${{ inputs.trivy-version }}

  terraform-checkov:
    name: "Static Security Analysis - Checkov"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    if: inputs.enable-checkov
    outputs:
      result: ${{ steps.security.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Terraform Bootstrap
        id: bootstrap
        uses: mjraadi/terraform-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
      - name: Ensure Checkov Configuration
        run: |
          [ -f ".checkov.yml" ] || echo "{}" > .checkov.yml
      - name: Run Checkov
        id: security
        uses: bridgecrewio/checkov-action@v12
        with:
          config_file: ${{ inputs.working-directory }}/.checkov.yml
          directory: ${{ inputs.working-directory }}
          download_external_modules: true
          framework: terraform
          output_format: cli,sarif
          soft_fail: true

  terraform-validate-examples:
    name: "Terraform Validate Examples"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.validate-examples.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Terraform Bootstrap
        id: bootstrap
        uses: mjraadi/terraform-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
      - name: Validate Examples
        id: validate-examples
        run: |
          for dir in examples/*; do
            if [ -d "$dir" ]; then
              echo "--> Validating $dir"
              terraform -chdir="${dir}" init -backend=false
              terraform -chdir="${dir}" validate -no-color
            fi
          done

  terraform-docs:
    name: "Terraform Docs"
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.docs.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Terraform Docs
        id: docs
        uses: terraform-docs/gh-actions@v1.4.1
        with:
          fail-on-diff: true
          working-dir: ${{ inputs.terraform-dir }}

  update-pr:
    name: "Update PR"
    if: github.event_name == 'pull_request' && (success() || failure())
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    needs:
      - terraform-docs
      - terraform-format
      - terraform-init
      - terraform-lint
      - terraform-tests
      - terraform-security
      - terraform-checkov
      - terraform-validate
      - terraform-validate-examples
    steps:
      - name: Add PR Comment
        uses: actions/github-script@v8
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pull Request Review Status') && comment.body.includes('<b>Working Directory:</b> \`${{ inputs.working-directory }}\`')
            })

            // 2. Prepare format of the comment
            const output = `### Pull Request Review Status
            * 🖌 <b>Terraform Format and Style:</b>     \`${{ needs.terraform-format.outputs.result }}\`
            * 🔍 <b>Terraform Linting:</b>              \`${{ needs.terraform-lint.outputs.result }}\`
            * 👮 <b>Terraform Security Check:</b>       \`${{ needs.terraform-security.outputs.result }}\`
            * 👮 <b>Terraform Security Checkov:</b>     \`${{ needs.terraform-checkov.outputs.result }}\`
            * 🔘 <b>Terraform Tests:</b>                \`${{ needs.terraform-tests.outputs.result }}\`
            * 🔧 <b>Terraform Initialisation:</b>       \`${{ needs.terraform-init.outputs.result }}\`
            * 🤖 <b>Terraform Validation:</b>           \`${{ needs.terraform-validate.outputs.result }}\`
            * 🤖 <b>Terraform Example Validation:</b>   \`${{ needs.terraform-validate-examples.outputs.result }}\`
            * 📖 <b>Terraform Documentation:</b>        \`${{ needs.terraform-docs.outputs.result }}\`

            *<b>Working Directory:</b> \`${{ inputs.working-directory }}\`*
            *<b>Pusher:</b> @${{ github.actor }}, <b>Action:</b> \`${{ github.event_name }}\`*
            *<b>Workflow Run Link:</b> ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
